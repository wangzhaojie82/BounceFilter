// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_MurmurHash3_x86_32_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        blocks_read,
        seed,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] blocks_read;
input  [16:0] seed;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] lshr_ln_reg_351;
reg   [16:0] tmp_s_reg_356;
wire   [31:0] seed_cast_fu_153_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] k1_5_fu_163_p2;
reg   [31:0] k1_5_reg_366;
wire   [2:0] add_ln99_fu_175_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln99_fu_169_p2;
wire   [31:0] h1_9_fu_228_p2;
wire  signed [31:0] xor_ln61_fu_280_p2;
reg  signed [31:0] xor_ln61_reg_384;
wire    ap_CS_fsm_state4;
reg   [2:0] i_reg_96;
reg   [31:0] h1_1_reg_107;
wire   [7:0] k1_4_fu_121_p0;
wire   [31:0] zext_ln46_fu_117_p1;
wire  signed [30:0] k1_4_fu_121_p1;
wire   [7:0] mul_ln25_fu_127_p0;
wire   [29:0] mul_ln25_fu_127_p1;
wire   [31:0] k1_4_fu_121_p2;
wire   [31:0] mul_ln25_fu_127_p2;
wire  signed [31:0] k1_5_fu_163_p0;
wire   [29:0] k1_5_fu_163_p1;
wire   [31:0] h1_7_fu_181_p2;
wire   [18:0] trunc_ln25_fu_186_p1;
wire   [12:0] lshr_ln25_1_fu_190_p4;
wire   [16:0] trunc_ln109_fu_208_p1;
wire   [31:0] h1_8_fu_200_p3;
wire   [31:0] add_ln109_fu_222_p2;
wire   [31:0] shl_ln_fu_212_p4;
wire   [31:0] h1_fu_234_p2;
wire   [15:0] lshr_ln3_fu_240_p4;
wire   [31:0] zext_ln59_fu_250_p1;
wire  signed [31:0] mul_ln60_fu_260_p0;
wire   [31:0] mul_ln60_fu_260_p2;
wire   [18:0] lshr_ln4_fu_266_p4;
wire   [31:0] zext_ln61_fu_276_p1;
wire  signed [30:0] mul_ln62_fu_286_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] mul_ln62_fu_286_p2;
wire   [15:0] trunc_ln5_fu_295_p4;
wire   [15:0] trunc_ln57_fu_291_p1;
wire   [7:0] trunc_ln63_4_fu_309_p4;
wire   [7:0] trunc_ln63_fu_305_p1;
wire   [15:0] h1_6_fu_319_p2;
wire   [7:0] tmp_1_fu_331_p4;
wire   [7:0] xor_ln57_fu_325_p2;
reg   [4:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

update_mul_8ns_31s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_8ns_31s_32_1_1_U1(
    .din0(k1_4_fu_121_p0),
    .din1(k1_4_fu_121_p1),
    .dout(k1_4_fu_121_p2)
);

update_mul_8ns_30ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_8ns_30ns_32_1_1_U2(
    .din0(mul_ln25_fu_127_p0),
    .din1(mul_ln25_fu_127_p1),
    .dout(mul_ln25_fu_127_p2)
);

update_mul_32s_30ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_32s_30ns_32_1_1_U3(
    .din0(k1_5_fu_163_p0),
    .din1(k1_5_fu_163_p1),
    .dout(k1_5_fu_163_p2)
);

update_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(mul_ln60_fu_260_p0),
    .din1(32'd2246822507),
    .dout(mul_ln60_fu_260_p2)
);

update_mul_32s_31s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_32s_31s_32_1_1_U5(
    .din0(xor_ln61_reg_384),
    .din1(mul_ln62_fu_286_p1),
    .dout(mul_ln62_fu_286_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h1_1_reg_107 <= seed_cast_fu_153_p1;
    end else if (((icmp_ln99_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        h1_1_reg_107 <= h1_9_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_96 <= 3'd4;
    end else if (((icmp_ln99_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_96 <= add_ln99_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k1_5_reg_366 <= k1_5_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lshr_ln_reg_351 <= {{k1_4_fu_121_p2[31:17]}};
        tmp_s_reg_356 <= {{mul_ln25_fu_127_p2[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln61_reg_384 <= xor_ln61_fu_280_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln99_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_222_p2 = ($signed(h1_8_fu_200_p3) + $signed(32'd3864292196));

assign add_ln99_fu_175_p2 = (i_reg_96 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = {{{trunc_ln5_fu_295_p4}, {tmp_1_fu_331_p4}}, {xor_ln57_fu_325_p2}};

assign h1_6_fu_319_p2 = (trunc_ln5_fu_295_p4 ^ trunc_ln57_fu_291_p1);

assign h1_7_fu_181_p2 = (k1_5_reg_366 ^ h1_1_reg_107);

assign h1_8_fu_200_p3 = {{trunc_ln25_fu_186_p1}, {lshr_ln25_1_fu_190_p4}};

assign h1_9_fu_228_p2 = (add_ln109_fu_222_p2 + shl_ln_fu_212_p4);

assign h1_fu_234_p2 = (h1_1_reg_107 ^ 32'd16);

assign icmp_ln99_fu_169_p2 = ((i_reg_96 == 3'd0) ? 1'b1 : 1'b0);

assign k1_4_fu_121_p0 = zext_ln46_fu_117_p1;

assign k1_4_fu_121_p1 = 32'd3432918353;

assign k1_5_fu_163_p0 = {{tmp_s_reg_356}, {lshr_ln_reg_351}};

assign k1_5_fu_163_p1 = 32'd461845907;

assign lshr_ln25_1_fu_190_p4 = {{h1_7_fu_181_p2[31:19]}};

assign lshr_ln3_fu_240_p4 = {{h1_fu_234_p2[31:16]}};

assign lshr_ln4_fu_266_p4 = {{mul_ln60_fu_260_p2[31:13]}};

assign mul_ln25_fu_127_p0 = zext_ln46_fu_117_p1;

assign mul_ln25_fu_127_p1 = 32'd380141568;

assign mul_ln60_fu_260_p0 = (zext_ln59_fu_250_p1 ^ h1_fu_234_p2);

assign mul_ln62_fu_286_p1 = 32'd3266489909;

assign seed_cast_fu_153_p1 = seed;

assign shl_ln_fu_212_p4 = {{{trunc_ln109_fu_208_p1}, {lshr_ln25_1_fu_190_p4}}, {2'd0}};

assign tmp_1_fu_331_p4 = {{h1_6_fu_319_p2[15:8]}};

assign trunc_ln109_fu_208_p1 = h1_7_fu_181_p2[16:0];

assign trunc_ln25_fu_186_p1 = h1_7_fu_181_p2[18:0];

assign trunc_ln57_fu_291_p1 = mul_ln62_fu_286_p2[15:0];

assign trunc_ln5_fu_295_p4 = {{mul_ln62_fu_286_p2[31:16]}};

assign trunc_ln63_4_fu_309_p4 = {{mul_ln62_fu_286_p2[23:16]}};

assign trunc_ln63_fu_305_p1 = mul_ln62_fu_286_p2[7:0];

assign xor_ln57_fu_325_p2 = (trunc_ln63_fu_305_p1 ^ trunc_ln63_4_fu_309_p4);

assign xor_ln61_fu_280_p2 = (zext_ln61_fu_276_p1 ^ mul_ln60_fu_260_p2);

assign zext_ln46_fu_117_p1 = blocks_read;

assign zext_ln59_fu_250_p1 = lshr_ln3_fu_240_p4;

assign zext_ln61_fu_276_p1 = lshr_ln4_fu_266_p4;

endmodule //update_MurmurHash3_x86_32_1
