// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="update_update,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.139933,HLS_SYN_LAT=137,HLS_SYN_TPT=none,HLS_SYN_MEM=698,HLS_SYN_DSP=0,HLS_SYN_FF=2435,HLS_SYN_LUT=4582,HLS_VERSION=2020_2}" *)

module update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key,
        ele
);

parameter    ap_ST_fsm_state1 = 119'd1;
parameter    ap_ST_fsm_state2 = 119'd2;
parameter    ap_ST_fsm_state3 = 119'd4;
parameter    ap_ST_fsm_pp1_stage0 = 119'd8;
parameter    ap_ST_fsm_state7 = 119'd16;
parameter    ap_ST_fsm_state8 = 119'd32;
parameter    ap_ST_fsm_state9 = 119'd64;
parameter    ap_ST_fsm_state10 = 119'd128;
parameter    ap_ST_fsm_state11 = 119'd256;
parameter    ap_ST_fsm_state12 = 119'd512;
parameter    ap_ST_fsm_state13 = 119'd1024;
parameter    ap_ST_fsm_state14 = 119'd2048;
parameter    ap_ST_fsm_state15 = 119'd4096;
parameter    ap_ST_fsm_state16 = 119'd8192;
parameter    ap_ST_fsm_state17 = 119'd16384;
parameter    ap_ST_fsm_state18 = 119'd32768;
parameter    ap_ST_fsm_state19 = 119'd65536;
parameter    ap_ST_fsm_state20 = 119'd131072;
parameter    ap_ST_fsm_state21 = 119'd262144;
parameter    ap_ST_fsm_state22 = 119'd524288;
parameter    ap_ST_fsm_state23 = 119'd1048576;
parameter    ap_ST_fsm_state24 = 119'd2097152;
parameter    ap_ST_fsm_state25 = 119'd4194304;
parameter    ap_ST_fsm_state26 = 119'd8388608;
parameter    ap_ST_fsm_state27 = 119'd16777216;
parameter    ap_ST_fsm_state28 = 119'd33554432;
parameter    ap_ST_fsm_state29 = 119'd67108864;
parameter    ap_ST_fsm_state30 = 119'd134217728;
parameter    ap_ST_fsm_state31 = 119'd268435456;
parameter    ap_ST_fsm_state32 = 119'd536870912;
parameter    ap_ST_fsm_state33 = 119'd1073741824;
parameter    ap_ST_fsm_state34 = 119'd2147483648;
parameter    ap_ST_fsm_state35 = 119'd4294967296;
parameter    ap_ST_fsm_state36 = 119'd8589934592;
parameter    ap_ST_fsm_state37 = 119'd17179869184;
parameter    ap_ST_fsm_state38 = 119'd34359738368;
parameter    ap_ST_fsm_state39 = 119'd68719476736;
parameter    ap_ST_fsm_state40 = 119'd137438953472;
parameter    ap_ST_fsm_state41 = 119'd274877906944;
parameter    ap_ST_fsm_state42 = 119'd549755813888;
parameter    ap_ST_fsm_state43 = 119'd1099511627776;
parameter    ap_ST_fsm_state44 = 119'd2199023255552;
parameter    ap_ST_fsm_state45 = 119'd4398046511104;
parameter    ap_ST_fsm_state46 = 119'd8796093022208;
parameter    ap_ST_fsm_state47 = 119'd17592186044416;
parameter    ap_ST_fsm_state48 = 119'd35184372088832;
parameter    ap_ST_fsm_state49 = 119'd70368744177664;
parameter    ap_ST_fsm_state50 = 119'd140737488355328;
parameter    ap_ST_fsm_state51 = 119'd281474976710656;
parameter    ap_ST_fsm_state52 = 119'd562949953421312;
parameter    ap_ST_fsm_state53 = 119'd1125899906842624;
parameter    ap_ST_fsm_state54 = 119'd2251799813685248;
parameter    ap_ST_fsm_state55 = 119'd4503599627370496;
parameter    ap_ST_fsm_state56 = 119'd9007199254740992;
parameter    ap_ST_fsm_state57 = 119'd18014398509481984;
parameter    ap_ST_fsm_state58 = 119'd36028797018963968;
parameter    ap_ST_fsm_state59 = 119'd72057594037927936;
parameter    ap_ST_fsm_state60 = 119'd144115188075855872;
parameter    ap_ST_fsm_state61 = 119'd288230376151711744;
parameter    ap_ST_fsm_state62 = 119'd576460752303423488;
parameter    ap_ST_fsm_state63 = 119'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 119'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 119'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 119'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 119'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 119'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 119'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 119'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 119'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 119'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 119'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 119'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 119'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 119'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 119'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 119'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 119'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 119'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 119'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 119'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 119'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 119'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 119'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 119'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 119'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 119'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 119'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 119'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 119'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 119'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 119'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 119'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 119'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 119'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 119'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 119'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 119'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 119'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 119'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 119'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 119'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 119'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 119'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 119'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 119'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 119'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 119'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 119'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 119'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 119'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 119'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 119'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 119'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 119'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 119'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 119'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 119'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 119'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 119'd332306998946228968225951765070086144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] key;
input  [7:0] ele;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [118:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [16:0] B1_address0;
reg    B1_ce0;
reg    B1_we0;
wire   [31:0] B1_q0;
reg   [17:0] B2_address0;
reg    B2_ce0;
reg    B2_we0;
wire   [31:0] B2_d0;
wire   [31:0] B2_q0;
reg   [17:0] C_address0;
reg    C_ce0;
reg    C_we0;
wire   [31:0] C_d0;
wire   [31:0] C_q0;
reg   [17:0] C_address1;
reg    C_ce1;
reg    C_we1;
wire   [31:0] C_d1;
wire   [31:0] C_q1;
reg   [2:0] i_1_reg_334;
reg   [31:0] h1_1_reg_345;
wire   [31:0] grp_MurmurHash3_x86_32_1_fu_357_ap_return;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state84;
wire   [7:0] xor_ln48_fu_390_p2;
reg   [7:0] xor_ln48_reg_1512;
wire   [4:0] add_ln47_fu_396_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln99_fu_413_p2;
reg   [0:0] icmp_ln99_reg_1525;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_state6_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln99_reg_1525_pp1_iter1_reg;
wire   [2:0] add_ln99_fu_419_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [14:0] lshr_ln2_reg_1554;
reg   [16:0] tmp_7_reg_1559;
wire   [31:0] h1_5_fu_579_p2;
reg    ap_enable_reg_pp1_iter2;
wire  signed [31:0] xor_ln61_fu_631_p2;
reg  signed [31:0] xor_ln61_reg_1569;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [16:0] zext_ln52_fu_726_p1;
reg   [16:0] zext_ln52_reg_1579;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_731_p2;
reg   [31:0] hashIndex_1_reg_1584;
wire    ap_CS_fsm_state79;
wire   [16:0] zext_ln43_1_fu_741_p1;
reg   [16:0] zext_ln43_1_reg_1590;
wire   [2:0] trunc_ln56_fu_746_p1;
reg   [2:0] trunc_ln56_reg_1595;
reg   [16:0] B1_addr_reg_1600;
wire   [0:0] opt_1_fu_765_p1;
reg   [0:0] opt_1_reg_1605;
wire    ap_CS_fsm_state80;
wire   [0:0] empty_13_fu_826_p2;
reg   [0:0] empty_13_reg_1615;
wire   [31:0] or_ln75_fu_1098_p2;
reg   [31:0] or_ln75_reg_1619;
wire   [1:0] trunc_ln84_fu_1104_p1;
reg   [1:0] trunc_ln84_reg_1624;
reg   [17:0] B2_addr_reg_1629;
wire   [0:0] empty_16_fu_1178_p2;
reg   [0:0] empty_16_reg_1634;
wire    ap_CS_fsm_state82;
wire   [31:0] grp_MurmurHash3_x86_32_1_fu_364_ap_return;
wire    ap_CS_fsm_state85;
reg   [17:0] C_addr_reg_1648;
wire    ap_CS_fsm_state119;
reg   [17:0] C_addr_1_reg_1654;
reg   [31:0] C_load_1_reg_1660;
wire    ap_CS_fsm_state120;
reg   [17:0] C_addr_2_reg_1665;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg   [3:0] XOR_address0;
reg    XOR_ce0;
reg    XOR_we0;
wire   [7:0] XOR_q0;
wire   [3:0] XOR_address1;
reg    XOR_ce1;
wire   [7:0] XOR_q1;
wire   [3:0] XOR_address2;
reg    XOR_ce2;
wire   [7:0] XOR_q2;
wire   [3:0] XOR_address3;
reg    XOR_ce3;
wire   [7:0] XOR_q3;
wire    grp_MurmurHash3_x86_32_1_fu_357_ap_start;
wire    grp_MurmurHash3_x86_32_1_fu_357_ap_done;
wire    grp_MurmurHash3_x86_32_1_fu_357_ap_idle;
wire    grp_MurmurHash3_x86_32_1_fu_357_ap_ready;
reg   [16:0] grp_MurmurHash3_x86_32_1_fu_357_seed;
wire    grp_MurmurHash3_x86_32_1_fu_364_ap_start;
wire    grp_MurmurHash3_x86_32_1_fu_364_ap_done;
wire    grp_MurmurHash3_x86_32_1_fu_364_ap_idle;
wire    grp_MurmurHash3_x86_32_1_fu_364_ap_ready;
reg   [4:0] i_reg_323;
wire   [0:0] icmp_ln47_fu_402_p2;
reg    grp_MurmurHash3_x86_32_1_fu_357_ap_start_reg;
wire    ap_CS_fsm_state83;
reg    ap_block_state84_on_subcall_done;
reg    grp_MurmurHash3_x86_32_1_fu_364_ap_start_reg;
wire   [63:0] i_cast_fu_408_p1;
wire   [63:0] zext_ln46_fu_437_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln46_1_fu_448_p1;
wire   [63:0] zext_ln46_2_fu_459_p1;
wire   [63:0] zext_ln46_3_fu_470_p1;
wire   [63:0] zext_ln59_fu_760_p1;
wire   [63:0] zext_ln87_fu_1116_p1;
wire   [63:0] zext_ln109_fu_1457_p1;
wire   [63:0] zext_ln113_1_fu_1476_p1;
wire   [63:0] zext_ln117_1_fu_1495_p1;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state121;
wire   [16:0] grp_fu_372_p1;
wire   [1:0] trunc_ln46_fu_425_p1;
wire   [3:0] shl_ln_fu_429_p3;
wire   [3:0] or_ln46_fu_442_p2;
wire   [3:0] or_ln46_1_fu_453_p2;
wire   [3:0] or_ln46_2_fu_464_p2;
wire  signed [31:0] k1_fu_475_p5;
wire  signed [30:0] k1_1_fu_487_p1;
wire   [29:0] mul_ln25_fu_493_p1;
wire   [31:0] k1_1_fu_487_p2;
wire   [31:0] mul_ln25_fu_493_p2;
wire  signed [31:0] k1_3_fu_525_p0;
wire   [29:0] k1_3_fu_525_p1;
wire   [31:0] k1_3_fu_525_p2;
wire   [31:0] h1_4_fu_531_p2;
wire   [18:0] trunc_ln25_fu_537_p1;
wire   [12:0] lshr_ln25_1_fu_541_p4;
wire   [16:0] trunc_ln109_fu_559_p1;
wire   [31:0] h1_3_fu_551_p3;
wire   [31:0] add_ln109_1_fu_573_p2;
wire   [31:0] shl_ln1_fu_563_p4;
wire   [31:0] h1_fu_585_p2;
wire   [15:0] lshr_ln_fu_591_p4;
wire   [31:0] zext_ln59_1_fu_601_p1;
wire  signed [31:0] mul_ln60_fu_611_p0;
wire   [31:0] mul_ln60_fu_611_p2;
wire   [18:0] lshr_ln1_fu_617_p4;
wire   [31:0] zext_ln61_fu_627_p1;
wire  signed [30:0] mul_ln62_fu_637_p1;
wire   [31:0] mul_ln62_fu_637_p2;
wire   [15:0] trunc_ln1_fu_646_p4;
wire   [15:0] trunc_ln57_fu_642_p1;
wire   [7:0] trunc_ln63_2_fu_660_p4;
wire   [7:0] trunc_ln63_fu_656_p1;
wire   [15:0] h1_2_fu_670_p2;
wire   [7:0] tmp_1_fu_682_p4;
wire   [7:0] xor_ln57_fu_676_p2;
wire   [31:0] grp_fu_702_p0;
wire   [2:0] grp_fu_702_p1;
wire   [1:0] grp_fu_702_p2;
wire   [1:0] trunc_ln43_fu_708_p1;
wire   [14:0] zext_ln43_fu_712_p1;
wire   [14:0] add_ln52_fu_716_p2;
wire  signed [15:0] sext_ln52_fu_722_p1;
wire   [15:0] grp_fu_731_p1;
wire   [14:0] trunc_ln43_1_fu_737_p1;
wire   [11:0] real_counter_index_fu_750_p4;
wire   [4:0] offset_fu_769_p3;
wire   [5:0] zext_ln44_fu_776_p1;
wire   [5:0] sub_ln58_fu_780_p2;
wire   [5:0] add_ln58_fu_786_p2;
wire  signed [31:0] sext_ln58_fu_792_p1;
wire   [31:0] mask_fu_796_p2;
wire   [31:0] and_ln59_fu_802_p2;
wire   [31:0] counter_value_fu_808_p2;
wire   [0:0] empty_12_fu_820_p2;
wire   [0:0] empty_11_fu_814_p2;
wire   [0:0] tmp_2_fu_832_p3;
wire   [0:0] trunc_ln62_fu_854_p1;
wire   [30:0] tmp_fu_864_p4;
wire   [0:0] or_ln62_fu_858_p2;
wire   [31:0] or_ln_fu_874_p3;
wire   [0:0] icmp_ln64_fu_888_p2;
wire   [3:0] sign_flag_fu_840_p3;
wire   [0:0] icmp_ln66_fu_900_p2;
wire   [0:0] icmp_ln68_fu_918_p2;
wire   [3:0] or_ln1_fu_936_p4;
wire   [0:0] xor_ln62_fu_848_p2;
wire   [0:0] icmp_ln62_fu_882_p2;
wire   [0:0] and_ln64_fu_894_p2;
wire   [0:0] or_ln64_fu_958_p2;
wire   [0:0] and_ln66_fu_906_p2;
wire   [0:0] xor_ln64_fu_964_p2;
wire   [0:0] or_ln66_fu_976_p2;
wire   [0:0] and_ln68_fu_924_p2;
wire   [0:0] xor_ln66_fu_982_p2;
wire   [0:0] or_ln68_fu_994_p2;
wire   [0:0] icmp_ln70_fu_946_p2;
wire   [0:0] xor_ln68_fu_1000_p2;
wire   [0:0] xor_ln62_1_fu_1012_p2;
wire   [0:0] and_ln64_1_fu_1018_p2;
wire   [0:0] and_ln70_fu_1006_p2;
wire   [0:0] and_ln68_1_fu_988_p2;
wire   [0:0] and_ln66_1_fu_970_p2;
wire   [0:0] and_ln72_fu_952_p2;
wire   [0:0] or_ln64_1_fu_1032_p2;
wire   [31:0] select_ln64_fu_1024_p3;
wire   [31:0] counter_value_9_fu_930_p2;
wire   [0:0] or_ln64_2_fu_1038_p2;
wire   [0:0] or_ln64_3_fu_1044_p2;
wire   [31:0] counter_value_8_fu_912_p2;
wire   [0:0] or_ln64_4_fu_1058_p2;
wire   [31:0] select_ln64_1_fu_1050_p3;
wire   [31:0] select_ln64_2_fu_1064_p3;
wire   [31:0] xor_ln74_fu_1080_p2;
wire   [31:0] counter_value_10_fu_1072_p3;
wire   [31:0] shl_ln75_fu_1092_p2;
wire   [31:0] and_ln74_fu_1086_p2;
wire   [12:0] real_counter_index_1_fu_1107_p4;
wire   [4:0] offset_1_fu_1121_p3;
wire   [5:0] zext_ln44_1_fu_1128_p1;
wire   [5:0] sub_ln86_fu_1132_p2;
wire   [5:0] add_ln86_fu_1138_p2;
wire  signed [31:0] sext_ln86_fu_1144_p1;
wire   [31:0] mask_1_fu_1148_p2;
wire   [31:0] and_ln87_fu_1154_p2;
wire   [31:0] counter_value_4_fu_1160_p2;
wire   [0:0] empty_15_fu_1172_p2;
wire   [0:0] empty_14_fu_1166_p2;
wire   [0:0] tmp_3_fu_1184_p3;
wire   [0:0] trunc_ln90_fu_1205_p1;
wire   [30:0] tmp_5_fu_1214_p4;
wire   [0:0] or_ln90_fu_1209_p2;
wire   [31:0] or_ln2_fu_1224_p3;
wire   [0:0] icmp_ln92_fu_1238_p2;
wire   [7:0] sign_flag_1_fu_1192_p3;
wire   [0:0] icmp_ln94_fu_1249_p2;
wire   [0:0] icmp_ln96_fu_1266_p2;
wire   [7:0] or_ln3_fu_1283_p4;
wire   [0:0] xor_ln90_fu_1200_p2;
wire   [0:0] icmp_ln90_fu_1232_p2;
wire   [0:0] and_ln92_fu_1244_p2;
wire   [0:0] or_ln92_fu_1304_p2;
wire   [0:0] and_ln94_fu_1255_p2;
wire   [0:0] xor_ln92_fu_1310_p2;
wire   [0:0] or_ln94_fu_1322_p2;
wire   [0:0] and_ln96_fu_1272_p2;
wire   [0:0] xor_ln94_fu_1328_p2;
wire   [0:0] or_ln96_fu_1340_p2;
wire   [0:0] icmp_ln98_fu_1292_p2;
wire   [0:0] xor_ln96_fu_1346_p2;
wire   [0:0] xor_ln90_1_fu_1358_p2;
wire   [0:0] and_ln92_1_fu_1364_p2;
wire   [0:0] and_ln98_fu_1352_p2;
wire   [0:0] and_ln96_1_fu_1334_p2;
wire   [0:0] and_ln94_1_fu_1316_p2;
wire   [0:0] and_ln100_fu_1298_p2;
wire   [0:0] or_ln92_1_fu_1378_p2;
wire   [31:0] select_ln92_fu_1370_p3;
wire   [31:0] counter_value_12_fu_1277_p2;
wire   [0:0] or_ln92_2_fu_1384_p2;
wire   [0:0] or_ln92_3_fu_1390_p2;
wire   [31:0] counter_value_11_fu_1260_p2;
wire   [0:0] or_ln92_4_fu_1404_p2;
wire   [31:0] select_ln92_1_fu_1396_p3;
wire   [31:0] select_ln92_2_fu_1410_p3;
wire   [31:0] xor_ln102_fu_1426_p2;
wire   [31:0] counter_value_13_fu_1418_p3;
wire   [31:0] shl_ln103_fu_1438_p2;
wire   [31:0] and_ln102_fu_1432_p2;
wire   [16:0] grp_fu_1451_p1;
wire   [31:0] grp_fu_372_p2;
wire   [15:0] grp_fu_1451_p2;
wire   [15:0] trunc_ln113_fu_1462_p1;
wire   [16:0] zext_ln113_fu_1466_p1;
wire   [16:0] add_ln113_1_fu_1470_p2;
wire   [15:0] trunc_ln117_fu_1481_p0;
wire   [15:0] trunc_ln117_fu_1481_p1;
wire   [17:0] zext_ln117_fu_1485_p1;
wire   [17:0] add_ln117_1_fu_1489_p2;
reg    grp_fu_372_ap_start;
wire    grp_fu_372_ap_done;
reg    grp_fu_372_ce;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state118;
reg    grp_fu_702_ap_start;
wire    grp_fu_702_ap_done;
reg    grp_fu_731_ap_start;
wire    grp_fu_731_ap_done;
reg    grp_fu_731_ce;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
reg    grp_fu_1451_ap_start;
wire    grp_fu_1451_ap_done;
reg    grp_fu_1451_ce;
reg   [118:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 119'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_MurmurHash3_x86_32_1_fu_357_ap_start_reg = 1'b0;
#0 grp_MurmurHash3_x86_32_1_fu_364_ap_start_reg = 1'b0;
end

update_B1 #(
    .DataWidth( 32 ),
    .AddressRange( 80000 ),
    .AddressWidth( 17 ))
B1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B1_address0),
    .ce0(B1_ce0),
    .we0(B1_we0),
    .d0(or_ln75_reg_1619),
    .q0(B1_q0)
);

update_B2 #(
    .DataWidth( 32 ),
    .AddressRange( 160000 ),
    .AddressWidth( 18 ))
B2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B2_address0),
    .ce0(B2_ce0),
    .we0(B2_we0),
    .d0(B2_d0),
    .q0(B2_q0)
);

update_C #(
    .DataWidth( 32 ),
    .AddressRange( 150000 ),
    .AddressWidth( 18 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(C_d0),
    .q0(C_q0),
    .address1(C_address1),
    .ce1(C_ce1),
    .we1(C_we1),
    .d1(C_d1),
    .q1(C_q1)
);

update_XOR #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
XOR_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(XOR_address0),
    .ce0(XOR_ce0),
    .we0(XOR_we0),
    .d0(xor_ln48_reg_1512),
    .q0(XOR_q0),
    .address1(XOR_address1),
    .ce1(XOR_ce1),
    .q1(XOR_q1),
    .address2(XOR_address2),
    .ce2(XOR_ce2),
    .q2(XOR_q2),
    .address3(XOR_address3),
    .ce3(XOR_ce3),
    .q3(XOR_q3)
);

update_MurmurHash3_x86_32_1 grp_MurmurHash3_x86_32_1_fu_357(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MurmurHash3_x86_32_1_fu_357_ap_start),
    .ap_done(grp_MurmurHash3_x86_32_1_fu_357_ap_done),
    .ap_idle(grp_MurmurHash3_x86_32_1_fu_357_ap_idle),
    .ap_ready(grp_MurmurHash3_x86_32_1_fu_357_ap_ready),
    .blocks_read(key),
    .seed(grp_MurmurHash3_x86_32_1_fu_357_seed),
    .ap_return(grp_MurmurHash3_x86_32_1_fu_357_ap_return)
);

update_MurmurHash3_x86_32_1 grp_MurmurHash3_x86_32_1_fu_364(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MurmurHash3_x86_32_1_fu_364_ap_start),
    .ap_done(grp_MurmurHash3_x86_32_1_fu_364_ap_done),
    .ap_idle(grp_MurmurHash3_x86_32_1_fu_364_ap_idle),
    .ap_ready(grp_MurmurHash3_x86_32_1_fu_364_ap_ready),
    .blocks_read(key),
    .seed(17'd47612),
    .ap_return(grp_MurmurHash3_x86_32_1_fu_364_ap_return)
);

update_urem_32ns_17ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
urem_32ns_17ns_32_36_seq_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_372_ap_start),
    .done(grp_fu_372_ap_done),
    .din0(grp_MurmurHash3_x86_32_1_fu_357_ap_return),
    .din1(grp_fu_372_p1),
    .ce(grp_fu_372_ce),
    .dout(grp_fu_372_p2)
);

update_mul_32s_31s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_32s_31s_32_1_1_U14(
    .din0(k1_fu_475_p5),
    .din1(k1_1_fu_487_p1),
    .dout(k1_1_fu_487_p2)
);

update_mul_32s_30ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_32s_30ns_32_1_1_U15(
    .din0(k1_fu_475_p5),
    .din1(mul_ln25_fu_493_p1),
    .dout(mul_ln25_fu_493_p2)
);

update_mul_32s_30ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_32s_30ns_32_1_1_U16(
    .din0(k1_3_fu_525_p0),
    .din1(k1_3_fu_525_p1),
    .dout(k1_3_fu_525_p2)
);

update_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U17(
    .din0(mul_ln60_fu_611_p0),
    .din1(32'd2246822507),
    .dout(mul_ln60_fu_611_p2)
);

update_mul_32s_31s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_32s_31s_32_1_1_U18(
    .din0(xor_ln61_reg_1569),
    .din1(mul_ln62_fu_637_p1),
    .dout(mul_ln62_fu_637_p2)
);

update_urem_32ns_3ns_2_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_32ns_3ns_2_36_seq_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_702_ap_start),
    .done(grp_fu_702_ap_done),
    .din0(grp_fu_702_p0),
    .din1(grp_fu_702_p1),
    .ce(1'b1),
    .dout(grp_fu_702_p2)
);

update_urem_32ns_16ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
urem_32ns_16ns_32_36_seq_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_731_ap_start),
    .done(grp_fu_731_ap_done),
    .din0(grp_MurmurHash3_x86_32_1_fu_357_ap_return),
    .din1(grp_fu_731_p1),
    .ce(grp_fu_731_ce),
    .dout(grp_fu_731_p2)
);

update_urem_32ns_17ns_16_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
urem_32ns_17ns_16_36_seq_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1451_ap_start),
    .done(grp_fu_1451_ap_done),
    .din0(grp_MurmurHash3_x86_32_1_fu_364_ap_return),
    .din1(grp_fu_1451_p1),
    .ce(grp_fu_1451_ce),
    .dout(grp_fu_1451_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MurmurHash3_x86_32_1_fu_357_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state43) | ((1'b0 == ap_block_state84_on_subcall_done) & (1'b1 == ap_CS_fsm_state84)))) begin
            grp_MurmurHash3_x86_32_1_fu_357_ap_start_reg <= 1'b1;
        end else if ((grp_MurmurHash3_x86_32_1_fu_357_ap_ready == 1'b1)) begin
            grp_MurmurHash3_x86_32_1_fu_357_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MurmurHash3_x86_32_1_fu_364_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state83)) begin
            grp_MurmurHash3_x86_32_1_fu_364_ap_start_reg <= 1'b1;
        end else if ((grp_MurmurHash3_x86_32_1_fu_364_ap_ready == 1'b1)) begin
            grp_MurmurHash3_x86_32_1_fu_364_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h1_1_reg_345 <= 32'd51241;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln99_reg_1525_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        h1_1_reg_345 <= h1_5_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_334 <= 3'd4;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln99_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_334 <= add_ln99_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_323 <= 5'd0;
    end else if (((icmp_ln47_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_323 <= add_ln47_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        B1_addr_reg_1600[11 : 0] <= zext_ln59_fu_760_p1[11 : 0];
        hashIndex_1_reg_1584 <= grp_fu_731_p2;
        trunc_ln56_reg_1595 <= trunc_ln56_fu_746_p1;
        zext_ln43_1_reg_1590[14 : 0] <= zext_ln43_1_fu_741_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((empty_13_fu_826_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        B2_addr_reg_1629[12 : 0] <= zext_ln87_fu_1116_p1[12 : 0];
        trunc_ln84_reg_1624 <= trunc_ln84_fu_1104_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        C_addr_1_reg_1654[16 : 0] <= zext_ln113_1_fu_1476_p1[16 : 0];
        C_addr_reg_1648 <= zext_ln109_fu_1457_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        C_addr_2_reg_1665 <= zext_ln117_1_fu_1495_p1;
        C_load_1_reg_1660 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        empty_13_reg_1615 <= empty_13_fu_826_p2;
        opt_1_reg_1605 <= opt_1_fu_765_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        empty_16_reg_1634 <= empty_16_fu_1178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln99_reg_1525 <= icmp_ln99_fu_413_p2;
        icmp_ln99_reg_1525_pp1_iter1_reg <= icmp_ln99_reg_1525;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln99_reg_1525 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        lshr_ln2_reg_1554 <= {{k1_1_fu_487_p2[31:17]}};
        tmp_7_reg_1559 <= {{mul_ln25_fu_493_p2[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((empty_13_fu_826_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
        or_ln75_reg_1619 <= or_ln75_fu_1098_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        xor_ln48_reg_1512 <= xor_ln48_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xor_ln61_reg_1569 <= xor_ln61_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        zext_ln52_reg_1579[15 : 0] <= zext_ln52_fu_726_p1[15 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        B1_address0 = B1_addr_reg_1600;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        B1_address0 = zext_ln59_fu_760_p1;
    end else begin
        B1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79))) begin
        B1_ce0 = 1'b1;
    end else begin
        B1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        B1_we0 = 1'b1;
    end else begin
        B1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        B2_address0 = B2_addr_reg_1629;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        B2_address0 = zext_ln87_fu_1116_p1;
    end else begin
        B2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | ((grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state80)))) begin
        B2_ce0 = 1'b1;
    end else begin
        B2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_16_fu_1178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state82))) begin
        B2_we0 = 1'b1;
    end else begin
        B2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        C_address0 = C_addr_2_reg_1665;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        C_address0 = C_addr_reg_1648;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        C_address0 = zext_ln113_1_fu_1476_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        C_address1 = C_addr_1_reg_1654;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        C_address1 = zext_ln117_1_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        C_address1 = zext_ln109_fu_1457_p1;
    end else begin
        C_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) | ((empty_16_reg_1634 == 1'd1) & (empty_13_reg_1615 == 1'd1) & (1'b1 == ap_CS_fsm_state121)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_16_reg_1634 == 1'd1) & (empty_13_reg_1615 == 1'd1) & (1'b1 == ap_CS_fsm_state121))) begin
        C_we1 = 1'b1;
    end else begin
        C_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        XOR_address0 = zext_ln46_3_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        XOR_address0 = i_cast_fu_408_p1;
    end else begin
        XOR_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        XOR_ce0 = 1'b1;
    end else begin
        XOR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        XOR_ce1 = 1'b1;
    end else begin
        XOR_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        XOR_ce2 = 1'b1;
    end else begin
        XOR_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        XOR_ce3 = 1'b1;
    end else begin
        XOR_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        XOR_we0 = 1'b1;
    end else begin
        XOR_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln99_fu_413_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_MurmurHash3_x86_32_1_fu_357_seed = 17'd31213;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_MurmurHash3_x86_32_1_fu_357_seed = 17'd75123;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_MurmurHash3_x86_32_1_fu_357_seed = zext_ln43_1_reg_1590;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_MurmurHash3_x86_32_1_fu_357_seed = zext_ln52_reg_1579;
    end else begin
        grp_MurmurHash3_x86_32_1_fu_357_seed = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state84_on_subcall_done) & (1'b1 == ap_CS_fsm_state84))) begin
        grp_fu_1451_ap_start = 1'b1;
    end else begin
        grp_fu_1451_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86))) begin
        grp_fu_1451_ce = 1'b1;
    end else begin
        grp_fu_1451_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state85)) | ((1'b0 == ap_block_state84_on_subcall_done) & (1'b1 == ap_CS_fsm_state84)))) begin
        grp_fu_372_ap_start = 1'b1;
    end else begin
        grp_fu_372_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86))) begin
        grp_fu_372_ce = 1'b1;
    end else begin
        grp_fu_372_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_702_ap_start = 1'b1;
    end else begin
        grp_fu_702_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        grp_fu_731_ap_start = 1'b1;
    end else begin
        grp_fu_731_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_fu_731_ce = 1'b1;
    end else begin
        grp_fu_731_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln47_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln99_fu_413_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln99_fu_413_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b1) & (empty_13_fu_826_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else if (((grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b1) & (empty_13_fu_826_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state82 : begin
            if (((empty_16_fu_1178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((1'b0 == ap_block_state84_on_subcall_done) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B2_d0 = (shl_ln103_fu_1438_p2 | and_ln102_fu_1432_p2);

assign C_d0 = (C_q1 + 32'd1);

assign C_d1 = (C_load_1_reg_1660 + 32'd1);

assign XOR_address1 = zext_ln46_2_fu_459_p1;

assign XOR_address2 = zext_ln46_1_fu_448_p1;

assign XOR_address3 = zext_ln46_fu_437_p1;

assign add_ln109_1_fu_573_p2 = ($signed(h1_3_fu_551_p3) + $signed(32'd3864292196));

assign add_ln113_1_fu_1470_p2 = (zext_ln113_fu_1466_p1 + 17'd50000);

assign add_ln117_1_fu_1489_p2 = (zext_ln117_fu_1485_p1 + 18'd100000);

assign add_ln47_fu_396_p2 = (i_reg_323 + 5'd1);

assign add_ln52_fu_716_p2 = ($signed(zext_ln43_fu_712_p1) + $signed(15'd18473));

assign add_ln58_fu_786_p2 = ($signed(sub_ln58_fu_780_p2) + $signed(6'd60));

assign add_ln86_fu_1138_p2 = ($signed(sub_ln86_fu_1132_p2) + $signed(6'd56));

assign add_ln99_fu_419_p2 = (i_1_reg_334 + 3'd1);

assign and_ln100_fu_1298_p2 = (xor_ln90_fu_1200_p2 & icmp_ln96_fu_1266_p2);

assign and_ln102_fu_1432_p2 = (xor_ln102_fu_1426_p2 & B2_q0);

assign and_ln59_fu_802_p2 = (mask_fu_796_p2 & B1_q0);

assign and_ln64_1_fu_1018_p2 = (xor_ln62_1_fu_1012_p2 & and_ln64_fu_894_p2);

assign and_ln64_fu_894_p2 = (opt_1_fu_765_p1 & icmp_ln64_fu_888_p2);

assign and_ln66_1_fu_970_p2 = (xor_ln64_fu_964_p2 & and_ln66_fu_906_p2);

assign and_ln66_fu_906_p2 = (opt_1_fu_765_p1 & icmp_ln66_fu_900_p2);

assign and_ln68_1_fu_988_p2 = (xor_ln66_fu_982_p2 & and_ln68_fu_924_p2);

assign and_ln68_fu_924_p2 = (opt_1_fu_765_p1 & icmp_ln68_fu_918_p2);

assign and_ln70_fu_1006_p2 = (xor_ln68_fu_1000_p2 & icmp_ln70_fu_946_p2);

assign and_ln72_fu_952_p2 = (xor_ln62_fu_848_p2 & icmp_ln68_fu_918_p2);

assign and_ln74_fu_1086_p2 = (xor_ln74_fu_1080_p2 & B1_q0);

assign and_ln87_fu_1154_p2 = (mask_1_fu_1148_p2 & B2_q0);

assign and_ln92_1_fu_1364_p2 = (xor_ln90_1_fu_1358_p2 & and_ln92_fu_1244_p2);

assign and_ln92_fu_1244_p2 = (opt_1_reg_1605 & icmp_ln92_fu_1238_p2);

assign and_ln94_1_fu_1316_p2 = (xor_ln92_fu_1310_p2 & and_ln94_fu_1255_p2);

assign and_ln94_fu_1255_p2 = (opt_1_reg_1605 & icmp_ln94_fu_1249_p2);

assign and_ln96_1_fu_1334_p2 = (xor_ln94_fu_1328_p2 & and_ln96_fu_1272_p2);

assign and_ln96_fu_1272_p2 = (opt_1_reg_1605 & icmp_ln96_fu_1266_p2);

assign and_ln98_fu_1352_p2 = (xor_ln96_fu_1346_p2 & icmp_ln98_fu_1292_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd96];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state84_on_subcall_done = ((grp_MurmurHash3_x86_32_1_fu_364_ap_done == 1'b0) | (grp_MurmurHash3_x86_32_1_fu_357_ap_done == 1'b0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign counter_value_10_fu_1072_p3 = ((or_ln64_4_fu_1058_p2[0:0] == 1'b1) ? select_ln64_1_fu_1050_p3 : select_ln64_2_fu_1064_p3);

assign counter_value_11_fu_1260_p2 = (counter_value_4_fu_1160_p2 + 32'd1);

assign counter_value_12_fu_1277_p2 = ($signed(counter_value_4_fu_1160_p2) + $signed(32'd4294967295));

assign counter_value_13_fu_1418_p3 = ((or_ln92_4_fu_1404_p2[0:0] == 1'b1) ? select_ln92_1_fu_1396_p3 : select_ln92_2_fu_1410_p3);

assign counter_value_4_fu_1160_p2 = and_ln87_fu_1154_p2 >> sext_ln86_fu_1144_p1;

assign counter_value_8_fu_912_p2 = (counter_value_fu_808_p2 + 32'd1);

assign counter_value_9_fu_930_p2 = ($signed(counter_value_fu_808_p2) + $signed(32'd4294967295));

assign counter_value_fu_808_p2 = and_ln59_fu_802_p2 >> sext_ln58_fu_792_p1;

assign empty_11_fu_814_p2 = ((counter_value_fu_808_p2 == 32'd15) ? 1'b1 : 1'b0);

assign empty_12_fu_820_p2 = ((counter_value_fu_808_p2 == 32'd7) ? 1'b1 : 1'b0);

assign empty_13_fu_826_p2 = (empty_12_fu_820_p2 | empty_11_fu_814_p2);

assign empty_14_fu_1166_p2 = ((counter_value_4_fu_1160_p2 == 32'd255) ? 1'b1 : 1'b0);

assign empty_15_fu_1172_p2 = ((counter_value_4_fu_1160_p2 == 32'd127) ? 1'b1 : 1'b0);

assign empty_16_fu_1178_p2 = (empty_15_fu_1172_p2 | empty_14_fu_1166_p2);

assign grp_MurmurHash3_x86_32_1_fu_357_ap_start = grp_MurmurHash3_x86_32_1_fu_357_ap_start_reg;

assign grp_MurmurHash3_x86_32_1_fu_364_ap_start = grp_MurmurHash3_x86_32_1_fu_364_ap_start_reg;

assign grp_fu_1451_p1 = 32'd50000;

assign grp_fu_372_p1 = 32'd50000;

assign grp_fu_702_p0 = {{{trunc_ln1_fu_646_p4}, {tmp_1_fu_682_p4}}, {xor_ln57_fu_676_p2}};

assign grp_fu_702_p1 = 32'd3;

assign grp_fu_731_p1 = 32'd20001;

assign h1_2_fu_670_p2 = (trunc_ln57_fu_642_p1 ^ trunc_ln1_fu_646_p4);

assign h1_3_fu_551_p3 = {{trunc_ln25_fu_537_p1}, {lshr_ln25_1_fu_541_p4}};

assign h1_4_fu_531_p2 = (k1_3_fu_525_p2 ^ h1_1_reg_345);

assign h1_5_fu_579_p2 = (add_ln109_1_fu_573_p2 + shl_ln1_fu_563_p4);

assign h1_fu_585_p2 = (h1_1_reg_345 ^ 32'd16);

assign i_cast_fu_408_p1 = i_reg_323;

assign icmp_ln47_fu_402_p2 = ((i_reg_323 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_882_p2 = ((or_ln_fu_874_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_888_p2 = ((counter_value_fu_808_p2 == 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_900_p2 = ((sign_flag_fu_840_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_918_p2 = ((sign_flag_fu_840_p3 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_946_p2 = ((or_ln1_fu_936_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_1232_p2 = ((or_ln2_fu_1224_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_1238_p2 = ((counter_value_4_fu_1160_p2 == 32'd129) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1249_p2 = ((sign_flag_1_fu_1192_p3 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_1266_p2 = ((sign_flag_1_fu_1192_p3 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_1292_p2 = ((or_ln3_fu_1283_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_413_p2 = ((i_1_reg_334 == 3'd0) ? 1'b1 : 1'b0);

assign k1_1_fu_487_p1 = 32'd3432918353;

assign k1_3_fu_525_p0 = {{tmp_7_reg_1559}, {lshr_ln2_reg_1554}};

assign k1_3_fu_525_p1 = 32'd461845907;

assign k1_fu_475_p5 = {{{{XOR_q0}, {XOR_q1}}, {XOR_q2}}, {XOR_q3}};

assign lshr_ln1_fu_617_p4 = {{mul_ln60_fu_611_p2[31:13]}};

assign lshr_ln25_1_fu_541_p4 = {{h1_4_fu_531_p2[31:19]}};

assign lshr_ln_fu_591_p4 = {{h1_fu_585_p2[31:16]}};

assign mask_1_fu_1148_p2 = 32'd255 << sext_ln86_fu_1144_p1;

assign mask_fu_796_p2 = 32'd15 << sext_ln58_fu_792_p1;

assign mul_ln25_fu_493_p1 = 32'd380141568;

assign mul_ln60_fu_611_p0 = (zext_ln59_1_fu_601_p1 ^ h1_fu_585_p2);

assign mul_ln62_fu_637_p1 = 32'd3266489909;

assign offset_1_fu_1121_p3 = {{trunc_ln84_reg_1624}, {3'd0}};

assign offset_fu_769_p3 = {{trunc_ln56_reg_1595}, {2'd0}};

assign opt_1_fu_765_p1 = grp_MurmurHash3_x86_32_1_fu_357_ap_return[0:0];

assign or_ln1_fu_936_p4 = {{{tmp_2_fu_832_p3}, {2'd0}}, {opt_1_fu_765_p1}};

assign or_ln2_fu_1224_p3 = {{tmp_5_fu_1214_p4}, {or_ln90_fu_1209_p2}};

assign or_ln3_fu_1283_p4 = {{{tmp_3_fu_1184_p3}, {6'd0}}, {opt_1_reg_1605}};

assign or_ln46_1_fu_453_p2 = (shl_ln_fu_429_p3 | 4'd2);

assign or_ln46_2_fu_464_p2 = (shl_ln_fu_429_p3 | 4'd3);

assign or_ln46_fu_442_p2 = (shl_ln_fu_429_p3 | 4'd1);

assign or_ln62_fu_858_p2 = (trunc_ln62_fu_854_p1 | opt_1_fu_765_p1);

assign or_ln64_1_fu_1032_p2 = (icmp_ln62_fu_882_p2 | and_ln64_1_fu_1018_p2);

assign or_ln64_2_fu_1038_p2 = (and_ln70_fu_1006_p2 | and_ln68_1_fu_988_p2);

assign or_ln64_3_fu_1044_p2 = (and_ln72_fu_952_p2 | and_ln66_1_fu_970_p2);

assign or_ln64_4_fu_1058_p2 = (or_ln64_2_fu_1038_p2 | or_ln64_1_fu_1032_p2);

assign or_ln64_fu_958_p2 = (icmp_ln62_fu_882_p2 | and_ln64_fu_894_p2);

assign or_ln66_fu_976_p2 = (or_ln64_fu_958_p2 | and_ln66_fu_906_p2);

assign or_ln68_fu_994_p2 = (or_ln66_fu_976_p2 | and_ln68_fu_924_p2);

assign or_ln75_fu_1098_p2 = (shl_ln75_fu_1092_p2 | and_ln74_fu_1086_p2);

assign or_ln90_fu_1209_p2 = (trunc_ln90_fu_1205_p1 | opt_1_reg_1605);

assign or_ln92_1_fu_1378_p2 = (icmp_ln90_fu_1232_p2 | and_ln92_1_fu_1364_p2);

assign or_ln92_2_fu_1384_p2 = (and_ln98_fu_1352_p2 | and_ln96_1_fu_1334_p2);

assign or_ln92_3_fu_1390_p2 = (and_ln94_1_fu_1316_p2 | and_ln100_fu_1298_p2);

assign or_ln92_4_fu_1404_p2 = (or_ln92_2_fu_1384_p2 | or_ln92_1_fu_1378_p2);

assign or_ln92_fu_1304_p2 = (icmp_ln90_fu_1232_p2 | and_ln92_fu_1244_p2);

assign or_ln94_fu_1322_p2 = (or_ln92_fu_1304_p2 | and_ln94_fu_1255_p2);

assign or_ln96_fu_1340_p2 = (or_ln94_fu_1322_p2 | and_ln96_fu_1272_p2);

assign or_ln_fu_874_p3 = {{tmp_fu_864_p4}, {or_ln62_fu_858_p2}};

assign real_counter_index_1_fu_1107_p4 = {{hashIndex_1_reg_1584[14:2]}};

assign real_counter_index_fu_750_p4 = {{grp_fu_731_p2[14:3]}};

assign select_ln64_1_fu_1050_p3 = ((or_ln64_1_fu_1032_p2[0:0] == 1'b1) ? select_ln64_fu_1024_p3 : counter_value_9_fu_930_p2);

assign select_ln64_2_fu_1064_p3 = ((or_ln64_3_fu_1044_p2[0:0] == 1'b1) ? counter_value_8_fu_912_p2 : counter_value_fu_808_p2);

assign select_ln64_fu_1024_p3 = ((and_ln64_1_fu_1018_p2[0:0] == 1'b1) ? 32'd0 : 32'd9);

assign select_ln92_1_fu_1396_p3 = ((or_ln92_1_fu_1378_p2[0:0] == 1'b1) ? select_ln92_fu_1370_p3 : counter_value_12_fu_1277_p2);

assign select_ln92_2_fu_1410_p3 = ((or_ln92_3_fu_1390_p2[0:0] == 1'b1) ? counter_value_11_fu_1260_p2 : counter_value_4_fu_1160_p2);

assign select_ln92_fu_1370_p3 = ((and_ln92_1_fu_1364_p2[0:0] == 1'b1) ? 32'd0 : 32'd129);

assign sext_ln52_fu_722_p1 = $signed(add_ln52_fu_716_p2);

assign sext_ln58_fu_792_p1 = $signed(add_ln58_fu_786_p2);

assign sext_ln86_fu_1144_p1 = $signed(add_ln86_fu_1138_p2);

assign shl_ln103_fu_1438_p2 = counter_value_13_fu_1418_p3 << sext_ln86_fu_1144_p1;

assign shl_ln1_fu_563_p4 = {{{trunc_ln109_fu_559_p1}, {lshr_ln25_1_fu_541_p4}}, {2'd0}};

assign shl_ln75_fu_1092_p2 = counter_value_10_fu_1072_p3 << sext_ln58_fu_792_p1;

assign shl_ln_fu_429_p3 = {{trunc_ln46_fu_425_p1}, {2'd0}};

assign sign_flag_1_fu_1192_p3 = {{tmp_3_fu_1184_p3}, {7'd0}};

assign sign_flag_fu_840_p3 = {{tmp_2_fu_832_p3}, {3'd0}};

assign sub_ln58_fu_780_p2 = ($signed(6'd32) - $signed(zext_ln44_fu_776_p1));

assign sub_ln86_fu_1132_p2 = ($signed(6'd32) - $signed(zext_ln44_1_fu_1128_p1));

assign tmp_1_fu_682_p4 = {{h1_2_fu_670_p2[15:8]}};

assign tmp_2_fu_832_p3 = counter_value_fu_808_p2[32'd3];

assign tmp_3_fu_1184_p3 = counter_value_4_fu_1160_p2[32'd7];

assign tmp_5_fu_1214_p4 = {{counter_value_4_fu_1160_p2[31:1]}};

assign tmp_fu_864_p4 = {{counter_value_fu_808_p2[31:1]}};

assign trunc_ln109_fu_559_p1 = h1_4_fu_531_p2[16:0];

assign trunc_ln113_fu_1462_p1 = grp_fu_1451_p2[15:0];

assign trunc_ln117_fu_1481_p0 = grp_fu_372_p2;

assign trunc_ln117_fu_1481_p1 = trunc_ln117_fu_1481_p0[15:0];

assign trunc_ln1_fu_646_p4 = {{mul_ln62_fu_637_p2[31:16]}};

assign trunc_ln25_fu_537_p1 = h1_4_fu_531_p2[18:0];

assign trunc_ln43_1_fu_737_p1 = grp_fu_731_p2[14:0];

assign trunc_ln43_fu_708_p1 = grp_fu_702_p2[1:0];

assign trunc_ln46_fu_425_p1 = i_1_reg_334[1:0];

assign trunc_ln56_fu_746_p1 = grp_fu_731_p2[2:0];

assign trunc_ln57_fu_642_p1 = mul_ln62_fu_637_p2[15:0];

assign trunc_ln62_fu_854_p1 = counter_value_fu_808_p2[0:0];

assign trunc_ln63_2_fu_660_p4 = {{mul_ln62_fu_637_p2[23:16]}};

assign trunc_ln63_fu_656_p1 = mul_ln62_fu_637_p2[7:0];

assign trunc_ln84_fu_1104_p1 = hashIndex_1_reg_1584[1:0];

assign trunc_ln90_fu_1205_p1 = counter_value_4_fu_1160_p2[0:0];

assign xor_ln102_fu_1426_p2 = (mask_1_fu_1148_p2 ^ 32'd4294967295);

assign xor_ln48_fu_390_p2 = (key ^ ele);

assign xor_ln57_fu_676_p2 = (trunc_ln63_fu_656_p1 ^ trunc_ln63_2_fu_660_p4);

assign xor_ln61_fu_631_p2 = (zext_ln61_fu_627_p1 ^ mul_ln60_fu_611_p2);

assign xor_ln62_1_fu_1012_p2 = (icmp_ln62_fu_882_p2 ^ 1'd1);

assign xor_ln62_fu_848_p2 = (opt_1_fu_765_p1 ^ 1'd1);

assign xor_ln64_fu_964_p2 = (or_ln64_fu_958_p2 ^ 1'd1);

assign xor_ln66_fu_982_p2 = (or_ln66_fu_976_p2 ^ 1'd1);

assign xor_ln68_fu_1000_p2 = (or_ln68_fu_994_p2 ^ 1'd1);

assign xor_ln74_fu_1080_p2 = (mask_fu_796_p2 ^ 32'd4294967295);

assign xor_ln90_1_fu_1358_p2 = (icmp_ln90_fu_1232_p2 ^ 1'd1);

assign xor_ln90_fu_1200_p2 = (opt_1_reg_1605 ^ 1'd1);

assign xor_ln92_fu_1310_p2 = (or_ln92_fu_1304_p2 ^ 1'd1);

assign xor_ln94_fu_1328_p2 = (or_ln94_fu_1322_p2 ^ 1'd1);

assign xor_ln96_fu_1346_p2 = (or_ln96_fu_1340_p2 ^ 1'd1);

assign zext_ln109_fu_1457_p1 = grp_fu_372_p2;

assign zext_ln113_1_fu_1476_p1 = add_ln113_1_fu_1470_p2;

assign zext_ln113_fu_1466_p1 = trunc_ln113_fu_1462_p1;

assign zext_ln117_1_fu_1495_p1 = add_ln117_1_fu_1489_p2;

assign zext_ln117_fu_1485_p1 = trunc_ln117_fu_1481_p1;

assign zext_ln43_1_fu_741_p1 = trunc_ln43_1_fu_737_p1;

assign zext_ln43_fu_712_p1 = trunc_ln43_fu_708_p1;

assign zext_ln44_1_fu_1128_p1 = offset_1_fu_1121_p3;

assign zext_ln44_fu_776_p1 = offset_fu_769_p3;

assign zext_ln46_1_fu_448_p1 = or_ln46_fu_442_p2;

assign zext_ln46_2_fu_459_p1 = or_ln46_1_fu_453_p2;

assign zext_ln46_3_fu_470_p1 = or_ln46_2_fu_464_p2;

assign zext_ln46_fu_437_p1 = shl_ln_fu_429_p3;

assign zext_ln52_fu_726_p1 = $unsigned(sext_ln52_fu_722_p1);

assign zext_ln59_1_fu_601_p1 = lshr_ln_fu_591_p4;

assign zext_ln59_fu_760_p1 = real_counter_index_fu_750_p4;

assign zext_ln61_fu_627_p1 = lshr_ln1_fu_617_p4;

assign zext_ln87_fu_1116_p1 = real_counter_index_1_fu_1107_p4;

always @ (posedge ap_clk) begin
    zext_ln52_reg_1579[16] <= 1'b0;
    zext_ln43_1_reg_1590[16:15] <= 2'b00;
    B1_addr_reg_1600[16:12] <= 5'b00000;
    B2_addr_reg_1629[17:13] <= 5'b00000;
    C_addr_1_reg_1654[17] <= 1'b0;
end

endmodule //update
